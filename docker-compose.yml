version: "3.8"

services:
  traefik:
    image: traefik:v2.10
    command:
      - --log.level=DEBUG
      - --api.insecure=false
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=uds-strapi_app-network # Ensure this matches your network name
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt # Ensure this path exists or Docker will create it as a directory
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth-middleware"
      # Basic auth middleware
      - "traefik.http.middlewares.auth-middleware.basicauth.users=admin:$apr1$rF0g0UUr$qk6l4LtB4q7L1W96qkB5W1" # Change these credentials
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 96M

  strapi:
    build:
      context: ./strapi # Ensure ./strapi directory exists with your Dockerfile and app code
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./strapi/.env # Ensure ./strapi/.env file exists
    environment:
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=1024"
    volumes:
      - ./strapi/config:/opt/app/config
      - ./strapi/src:/opt/app/src
      - ./strapi/package.json:/opt/app/package.json
      - ./strapi/yarn.lock:/opt/app/yarn.lock # or package-lock.json if using npm
      - strapi1_data:/opt/app/public/uploads
      - ./ssl:/opt/app/ssl:ro # Optional: if you're managing SSL certs manually inside container
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=uds-strapi_app-network" # Ensure this matches your network name
      - "traefik.http.services.strapi-backend.loadbalancer.server.port=1337"
      - "traefik.http.routers.strapi1.rule=Host(`${DOMAIN_NAME}`)" # This rule is the same for strapi1 and strapi2
      - "traefik.http.routers.strapi1.entrypoints=websecure"
      - "traefik.http.routers.strapi1.service=strapi-backend"
      - "traefik.http.routers.strapi1.tls=true"
      - "traefik.http.routers.strapi1.tls.certresolver=letsencrypt"
      # Add HTTP router for ACME challenge
      - "traefik.http.routers.strapi1-http.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.strapi1-http.entrypoints=web"
      - "traefik.http.routers.strapi1-http.service=strapi-backend"
      - "traefik.http.middlewares.cloudflare-proto.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.strapi1.middlewares=cloudflare-proto"
    networks:
      - app-network
    depends_on:
      - traefik # Optional, but good for startup order if Traefik needs to be ready
      - redis
      - typesense
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 1536M
        reservations:
          cpus: '0.30'
          memory: 768M

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} # Ensure REDIS_PASSWORD is in your .env
    networks:
      - app-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 96M


  typesense:
      image: typesense/typesense:0.25.1
      environment:
        - TYPESENSE_API_KEY=${TYPESENSE_API_KEY:-some-strong-api-key}
        - TYPESENSE_DATA_DIR=/data
        - TYPESENSE_ENABLE_CORS=true
        # Add memory limits for Typesense
        - TYPESENSE_MEMORY_LIMIT_MIB=1024
      volumes:
        - typesense_data:/data
      networks:
        - app-network
      restart: unless-stopped
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.typesense.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/typesense`)"
        - "traefik.http.middlewares.strip-typesense-prefix.stripprefix.prefixes=/typesense"
        - "traefik.http.routers.typesense.middlewares=strip-typesense-prefix"
        - "traefik.http.services.typesense.loadbalancer.server.port=8108"
      deploy:
        resources:
          limits:
            cpus: '0.60'
            memory: 1024M
          reservations:
            cpus: '0.20'
            memory: 512M

networks:
  app-network:
    name: uds-strapi_app-network # Explicitly name the network
    driver: bridge

volumes:
  letsencrypt:
  strapi1_data:
  strapi2_data:
  redis_data:
  typesense_data:
