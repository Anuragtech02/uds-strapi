services:
  traefik:
    image: traefik:v2.10
    command:
      - --log.level=DEBUG
      - --api.insecure=false # Changed to false for security
      - --api.dashboard=true # Explicitly enable dashboard
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=uds-strapi_app-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth-middleware"
      # Basic auth middleware
      - "traefik.http.middlewares.auth-middleware.basicauth.users=admin:$apr1$rF0g0UUr$qk6l4LtB4q7L1W96qkB5W1"
    restart: unless-stopped

  strapi1:
    build:
      context: ./strapi
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./strapi/.env
    environment:
      NODE_ENV: production
    volumes:
      - ./strapi/config:/opt/app/config
      - ./strapi/src:/opt/app/src
      - ./strapi/package.json:/opt/app/package.json
      - ./strapi/yarn.lock:/opt/app/yarn.lock
      - strapi1_data:/opt/app/public/uploads
      - ./ssl:/opt/app/ssl:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=uds-strapi_app-network"
      - "traefik.http.services.strapi-backend.loadbalancer.server.port=1337"
      - "traefik.http.routers.strapi1.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.strapi1.entrypoints=websecure"
      - "traefik.http.routers.strapi1.service=strapi-backend"
      - "traefik.http.routers.strapi1.tls=true"
      - "traefik.http.routers.strapi1.tls.certresolver=letsencrypt"
      # Add HTTP router for ACME challenge
      - "traefik.http.routers.strapi1-http.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.strapi1-http.entrypoints=web"
      - "traefik.http.routers.strapi1-http.service=strapi-backend"
      - "traefik.http.middlewares.cloudflare-proto.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.strapi1.middlewares=cloudflare-proto"
    networks:
      - app-network
    depends_on:
      - traefik
      - redis
      - meilisearch

  strapi2:
    build:
      context: ./strapi
      dockerfile: Dockerfile
    env_file: ./strapi/.env
    environment:
      NODE_ENV: production
    volumes:
      - ./strapi/config:/opt/app/config
      - ./strapi/src:/opt/app/src
      - ./strapi/package.json:/opt/app/package.json
      - ./strapi/yarn.lock:/opt/app/yarn.lock
      - strapi2_data:/opt/app/public/uploads
      - ./ssl:/opt/app/ssl:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=uds-strapi_app-network"
      - "traefik.http.services.strapi-backend.loadbalancer.server.port=1337"
      - "traefik.http.routers.strapi2.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.strapi2.entrypoints=websecure"
      - "traefik.http.routers.strapi2.service=strapi-backend"
      - "traefik.http.routers.strapi2.tls=true"
      - "traefik.http.routers.strapi2.tls.certresolver=letsencrypt"
      # Add HTTP router for ACME challenge
      - "traefik.http.routers.strapi2-http.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.strapi2-http.entrypoints=web"
      - "traefik.http.routers.strapi2-http.service=strapi-backend"
      - "traefik.http.middlewares.cloudflare-proto.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.strapi2.middlewares=cloudflare-proto"
    networks:
      - app-network
    depends_on:
      - traefik
      - redis
      - meilisearch
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - app-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  meilisearch:
    image: getmeili/meilisearch:latest
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-STRAPI_UNIVDATOS_SEARCH}
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=production
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.meilisearch.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/meilisearch`)"
      - "traefik.http.middlewares.strip-meilisearch-prefix.stripprefix.prefixes=/meilisearch"
      - "traefik.http.routers.meilisearch.middlewares=strip-meilisearch-prefix"
      - "traefik.http.services.meilisearch.loadbalancer.server.port=7700"

networks:
  app-network:
    name: uds-strapi_app-network # Explicitly name the network
    driver: bridge

volumes:
  letsencrypt:
  strapi1_data:
  strapi2_data:
  redis_data:
  meilisearch_data:

